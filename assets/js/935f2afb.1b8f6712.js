"use strict";(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"reference":[{"type":"category","collapsed":true,"collapsible":true,"label":"Introduction","items":[{"type":"link","label":"Overview","href":"/docs/","docId":"intro"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"API","items":[{"type":"link","label":"Overview","href":"/docs/api","docId":"api/intro"},{"type":"category","collapsed":true,"collapsible":true,"label":"Getting started","items":[{"type":"link","label":"Overview","href":"/docs/api/start","docId":"api/start/intro"},{"type":"link","label":"Installation","href":"/docs/api/start/install","docId":"api/start/install"},{"type":"link","label":"Basics & Metadata","href":"/docs/api/start/basics","docId":"api/start/basics"},{"type":"link","label":"Create an instance","href":"/docs/api/start/create","docId":"api/start/create"},{"type":"link","label":"Runtime constants","href":"/docs/api/start/api.consts","docId":"api/start/api.consts"},{"type":"link","label":"State queries","href":"/docs/api/start/api.query","docId":"api/start/api.query"},{"type":"link","label":"RPC queries","href":"/docs/api/start/api.rpc","docId":"api/start/api.rpc"},{"type":"link","label":"Query subscriptions","href":"/docs/api/start/api.query.subs","docId":"api/start/api.query.subs"},{"type":"link","label":"Multi queries","href":"/docs/api/start/api.query.multi","docId":"api/start/api.query.multi"},{"type":"link","label":"Query extras","href":"/docs/api/start/api.query.other","docId":"api/start/api.query.other"},{"type":"link","label":"Transactions","href":"/docs/api/start/api.tx","docId":"api/start/api.tx"},{"type":"link","label":"Keyring","href":"/docs/api/start/keyring","docId":"api/start/keyring"},{"type":"link","label":"Transaction subscriptions","href":"/docs/api/start/api.tx.subs","docId":"api/start/api.tx.subs"},{"type":"link","label":"Complex transactions","href":"/docs/api/start/api.tx.wrap","docId":"api/start/api.tx.wrap"},{"type":"link","label":"Type basics","href":"/docs/api/start/types.basics","docId":"api/start/types.basics"},{"type":"link","label":"Extending types","href":"/docs/api/start/types.extend","docId":"api/start/types.extend"},{"type":"link","label":"rpc.custom","href":"/docs/api/start/rpc.custom","docId":"api/start/rpc.custom"},{"type":"link","label":"Type creation","href":"/docs/api/start/types.create","docId":"api/start/types.create"},{"type":"link","label":"TypeScript interfaces","href":"/docs/api/start/typescript","docId":"api/start/typescript"},{"type":"link","label":"TypeScript user generated","href":"/docs/api/start/typescript.user","docId":"api/start/typescript.user"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Cookbook","items":[{"type":"link","label":"Overview","href":"/docs/api/cookbook","docId":"api/cookbook/intro"},{"type":"link","label":"Blocks","href":"/docs/api/cookbook/blocks","docId":"api/cookbook/blocks"},{"type":"link","label":"Storage","href":"/docs/api/cookbook/storage","docId":"api/cookbook/storage"},{"type":"link","label":"Transactions","href":"/docs/api/cookbook/tx","docId":"api/cookbook/tx"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Examples","items":[{"type":"link","label":"ApiPromise Examples","href":"/docs/api/examples/promise","docId":"api/examples/promise/intro"},{"type":"link","label":"Simple Connect","href":"/docs/api/examples/promise/simple-connect","docId":"api/examples/promise/simple-connect"},{"type":"link","label":"Listen to new blocks","href":"/docs/api/examples/promise/listen-to-blocks","docId":"api/examples/promise/listen-to-blocks"},{"type":"link","label":"Listen to balance changes","href":"/docs/api/examples/promise/listen-to-balance-change","docId":"api/examples/promise/listen-to-balance-change"},{"type":"link","label":"Unsubscribe from listening to updates","href":"/docs/api/examples/promise/unsubscribe","docId":"api/examples/promise/unsubscribe"},{"type":"link","label":"Read storage","href":"/docs/api/examples/promise/read-storage","docId":"api/examples/promise/read-storage"},{"type":"link","label":"Read storage, at a specific blockhash","href":"/docs/api/examples/promise/read-storage-at","docId":"api/examples/promise/read-storage-at"},{"type":"link","label":"Make a simple transfer","href":"/docs/api/examples/promise/make-transfer","docId":"api/examples/promise/make-transfer"},{"type":"link","label":"Traverse events","href":"/docs/api/examples/promise/system-events","docId":"api/examples/promise/system-events"},{"type":"link","label":"Transfer events","href":"/docs/api/examples/promise/transfer-events","docId":"api/examples/promise/transfer-events"},{"type":"link","label":"Chain upgrade","href":"/docs/api/examples/promise/upgrade-chain","docId":"api/examples/promise/upgrade-chain"},{"type":"link","label":"TS type generation","href":"/docs/api/examples/promise/typegen","docId":"api/examples/promise/typegen"},{"type":"link","label":"Get chain information","href":"/docs/api/examples/promise/chain-info","docId":"api/examples/promise/chain-info"}]},{"type":"link","label":"FAQ","href":"/docs/api/FAQ","docId":"api/FAQ"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Substrate Metadata","items":[{"type":"link","label":"Overview","href":"/docs/substrate","docId":"substrate/intro"},{"type":"link","label":"JSON-RPC","href":"/docs/substrate/rpc","docId":"substrate/rpc"},{"type":"link","label":"Constants","href":"/docs/substrate/constants","docId":"substrate/constants"},{"type":"link","label":"Storage","href":"/docs/substrate/storage","docId":"substrate/storage"},{"type":"link","label":"Extrinsics","href":"/docs/substrate/extrinsics","docId":"substrate/extrinsics"},{"type":"link","label":"Events","href":"/docs/substrate/events","docId":"substrate/events"},{"type":"link","label":"Errors","href":"/docs/substrate/errors","docId":"substrate/errors"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Keyring","items":[{"type":"link","label":"Overview","href":"/docs/keyring","docId":"keyring/intro"},{"type":"category","collapsed":true,"collapsible":true,"label":"Getting started","items":[{"type":"link","label":"Overview","href":"/docs/keyring/start","docId":"keyring/start/intro"},{"type":"link","label":"Installation","href":"/docs/keyring/start/install","docId":"keyring/start/install"},{"type":"link","label":"Basics","href":"/docs/keyring/start/basics","docId":"keyring/start/basics"},{"type":"link","label":"Create","href":"/docs/keyring/start/create","docId":"keyring/start/create"},{"type":"link","label":"ss58 Formats","href":"/docs/keyring/start/ss58","docId":"keyring/start/ss58"},{"type":"link","label":"Sign & Verify","href":"/docs/keyring/start/sign-verify","docId":"keyring/start/sign-verify"},{"type":"link","label":"Substrate Uri","href":"/docs/keyring/start/suri","docId":"keyring/start/suri"}]},{"type":"link","label":"FAQ","href":"/docs/keyring/FAQ","docId":"keyring/FAQ"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Crypto Utilities","items":[{"type":"link","label":"Overview","href":"/docs/util-crypto","docId":"util-crypto/intro"},{"type":"category","collapsed":true,"collapsible":true,"label":"Examples","items":[{"type":"link","label":"Overview","href":"/docs/util-crypto/examples","docId":"util-crypto/examples/intro"},{"type":"link","label":"Create Mnemonic","href":"/docs/util-crypto/examples/create-mnemonic","docId":"util-crypto/examples/create-mnemonic"},{"type":"link","label":"Validate Address","href":"/docs/util-crypto/examples/validate-address","docId":"util-crypto/examples/validate-address"},{"type":"link","label":"Encrypt & Decrypt Messages","href":"/docs/util-crypto/examples/encrypt-decrypt","docId":"util-crypto/examples/encrypt-decrypt"},{"type":"link","label":"Generate a Multisig Account","href":"/docs/util-crypto/examples/create-multisig","docId":"util-crypto/examples/create-multisig"},{"type":"link","label":"Verify Signature","href":"/docs/util-crypto/examples/verify-signature","docId":"util-crypto/examples/verify-signature"},{"type":"link","label":"Hash Data","href":"/docs/util-crypto/examples/hash-data","docId":"util-crypto/examples/hash-data"}]},{"type":"link","label":"FAQ","href":"/docs/util-crypto/FAQ","docId":"util-crypto/FAQ"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Contracts (API)","items":[{"type":"link","label":"Overview","href":"/docs/api-contract","docId":"api-contract/intro"},{"type":"category","collapsed":true,"collapsible":true,"label":"Getting started","items":[{"type":"link","label":"Overview","href":"/docs/api-contract/start","docId":"api-contract/start/intro"},{"type":"link","label":"Installation","href":"/docs/api-contract/start/install","docId":"api-contract/start/install"},{"type":"link","label":"Basics","href":"/docs/api-contract/start/basics","docId":"api-contract/start/basics"},{"type":"link","label":"Code","href":"/docs/api-contract/start/code","docId":"api-contract/start/code"},{"type":"link","label":"Blueprint","href":"/docs/api-contract/start/blueprint","docId":"api-contract/start/blueprint"},{"type":"link","label":"Contract","href":"/docs/api-contract/start/contract.read","docId":"api-contract/start/contract.read"},{"type":"link","label":"Contract Tx","href":"/docs/api-contract/start/contract.tx","docId":"api-contract/start/contract.tx"}]},{"type":"link","label":"FAQ","href":"/docs/api-contract/FAQ","docId":"api-contract/FAQ"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Identicon (UI)","items":[{"type":"link","label":"Overview","href":"/docs/ui-identicon","docId":"ui-identicon/intro"},{"type":"link","label":"React","href":"/docs/ui-identicon/react","docId":"ui-identicon/react"},{"type":"link","label":"React Native","href":"/docs/ui-identicon/react-native","docId":"ui-identicon/react-native"},{"type":"link","label":"Vue","href":"/docs/ui-identicon/vue","docId":"ui-identicon/vue"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Keyring (UI)","items":[{"type":"link","label":"Overview","href":"/docs/ui-keyring","docId":"ui-keyring/intro"},{"type":"category","collapsed":true,"collapsible":true,"label":"Getting started","items":[{"type":"link","label":"Overview","href":"/docs/ui-keyring/start","docId":"ui-keyring/start/intro"},{"type":"link","label":"Installation","href":"/docs/ui-keyring/start/install","docId":"ui-keyring/start/install"},{"type":"link","label":"Initialization","href":"/docs/ui-keyring/start/init","docId":"ui-keyring/start/init"},{"type":"link","label":"Accounts","href":"/docs/ui-keyring/start/accounts","docId":"ui-keyring/start/accounts"},{"type":"link","label":"Addresses","href":"/docs/ui-keyring/start/addresses","docId":"ui-keyring/start/addresses"},{"type":"link","label":"Loading saved pairs","href":"/docs/ui-keyring/start/loading","docId":"ui-keyring/start/loading"}]}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Extension","items":[{"type":"link","label":"Overview","href":"/docs/extension","docId":"extension/intro"},{"type":"link","label":"Usage","href":"/docs/extension/usage","docId":"extension/usage"},{"type":"link","label":"Cookbook","href":"/docs/extension/cookbook","docId":"extension/cookbook"},{"type":"link","label":"FAQ","href":"/docs/extension/FAQ","docId":"extension/FAQ"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Build & Deployment","items":[{"type":"link","label":"FAQ","href":"/docs/usage/FAQ","docId":"usage/FAQ"}]}]},"docs":{"api-contract/FAQ":{"id":"api-contract/FAQ","title":"FAQ","description":"The list will be updated/expanded as questions come up, dealing with some common issues that API users find.","sidebar":"reference"},"api-contract/intro":{"id":"api-contract/intro","title":"Overview","description":"The @polkadot/api-contract interfaces provides a thin layer on-top of the available API transactions to allow you to manage Substrate contracts in a consistent way. Since not all Substrate chains have contracts available, using it assumes that you are connecting to a chain that has the contracts palette.","sidebar":"reference"},"api-contract/start/basics":{"id":"api-contract/start/basics","title":"Basics","description":"The @polkadot/api-contract comes with 3 general helpers and has *Rx-based versions for the users of the ApiRx version of the API. However here we will focus only on the ApiPromise-based version of the helpers, in much the same way as the API documentation. The 3 main interfaces provided are -","sidebar":"reference"},"api-contract/start/blueprint":{"id":"api-contract/start/blueprint","title":"Blueprint","description":"A BlueprintPromise wraps an existing codeHash and an Abi and provides the opportunity to create contracts on-chain. It is either created via new BlueprintPromise from an existing codeHash, or as seen in the code example from deploying a WASM code bundle on-chain.","sidebar":"reference"},"api-contract/start/code":{"id":"api-contract/start/code","title":"Code","description":"The CodePromise class allows the developer to manage calls to code deployment. In itself, it is easy to use for code deployment and it generally the first step, especially in cases where an existing codeHash is not available -","sidebar":"reference"},"api-contract/start/contract.read":{"id":"api-contract/start/contract.read","title":"Contract","description":"The ContractPromise interface allows you to interact with a deployed contract. In the previous Blueprint example this instance was created via createContract. In general use, you can also create an instance via new, i.e. when you are attaching to an existing contract on-chain -","sidebar":"reference"},"api-contract/start/contract.tx":{"id":"api-contract/start/contract.tx","title":"Contract Tx","description":"In addition to using the .query. on a contract, the .tx. method is provides to send an actual encoded transaction to the contract, allow for execution and have this applied in a block. Expanding on our previous examples, we can now execute and then retrieve the subsequent value -","sidebar":"reference"},"api-contract/start/install":{"id":"api-contract/start/install","title":"Installation","description":"The @polkadot/api-contract packages is to be used alongside the @polkadot/api package. With that in-mind we can install from npm, so we are not going to waste too much time with the bare basics, just install the API & contracts extensions via","sidebar":"reference"},"api-contract/start/intro":{"id":"api-contract/start/intro","title":"Overview","description":"These sections should provide you with all the information needed to install the @polkadot/api-contract package, understand the structure of the interfaces and allow you to start using it. For existing users this really should be titled \\"Things I wish I knew before I started using contracts\\" - it really aims to close the gap to allow anybody to get to grips with using the package.","sidebar":"reference"},"api/cookbook/blocks":{"id":"api/cookbook/blocks","title":"Blocks","description":"The building blocks for each blockchain. As such there are a number of examples for working with blocks and headers, that could be useful.","sidebar":"reference"},"api/cookbook/intro":{"id":"api/cookbook/intro","title":"Overview","description":"The cookbook hosts small code snippets in a question-answer format. It does not walk you through the whole setup, like the basic examples, but rather aims to answer some questions around specific uses. It also does not replace the FAQ, rather this is focussed explicitly on code samples, instead of general trouble-shooting for common mishaps.","sidebar":"reference"},"api/cookbook/storage":{"id":"api/cookbook/storage","title":"Storage","description":"Here you will find snippets for working with storage.","sidebar":"reference"},"api/cookbook/tx":{"id":"api/cookbook/tx","title":"Transactions","description":"A blockchain is no fun if you are not submitting transactions. Or at least if somebody is not submitting any. Here you will find some snippets for dealing with some common issues.","sidebar":"reference"},"api/examples/promise/chain-info":{"id":"api/examples/promise/chain-info","title":"Get chain information","description":"This example shows how to connect to the api and retrieve the chain information such as the token name, the ss58 format for address encoding and the token decimals.","sidebar":"reference"},"api/examples/promise/intro":{"id":"api/examples/promise/intro","title":"ApiPromise Examples","description":"Here you will find a list of examples that takes you through the basics of connecting to a local node, retrieving data from the Node and chain and execute transactions on the chain. It uses the [[ApiPromise]] interface.","sidebar":"reference"},"api/examples/promise/listen-to-balance-change":{"id":"api/examples/promise/listen-to-balance-change","title":"Listen to balance changes","description":"This example shows how to instantiate a Polkadot API object and use it to connect to a node and retrieve balance updates.","sidebar":"reference"},"api/examples/promise/listen-to-blocks":{"id":"api/examples/promise/listen-to-blocks","title":"Listen to new blocks","description":"This example shows how to subscribe to new blocks.","sidebar":"reference"},"api/examples/promise/listen-to-multiple-balances-change":{"id":"api/examples/promise/listen-to-multiple-balances-change","title":"Listen to balance changes","description":"This example shows how to instantiate a Polkadot API object and use it to connect to a node and retrieve balance updates."},"api/examples/promise/make-transfer":{"id":"api/examples/promise/make-transfer","title":"Make a simple transfer","description":"This sample shows how to create a transaction to make a transfer from one account to another.","sidebar":"reference"},"api/examples/promise/read-storage":{"id":"api/examples/promise/read-storage","title":"Read storage","description":"Many important variables are available through the storage API. This example shows how to call a few of those APIs.","sidebar":"reference"},"api/examples/promise/read-storage-at":{"id":"api/examples/promise/read-storage-at","title":"Read storage, at a specific blockhash","description":"In addition to querying the latest storage, you can make storage queries at a specific blockhash. Be aware that the node applies a pruning strategy and typically only keeps the last 256 blocks, unless run in archive mode.","sidebar":"reference"},"api/examples/promise/simple-connect":{"id":"api/examples/promise/simple-connect","title":"Simple Connect","description":"The following example shows how to instantiate a Polkadot API object and use it to connect to a node using ApiPromise.","sidebar":"reference"},"api/examples/promise/system-events":{"id":"api/examples/promise/system-events","title":"Traverse events","description":"Query the system events and extract information from them. This example runs until exited via Ctrl-C","sidebar":"reference"},"api/examples/promise/transfer-events":{"id":"api/examples/promise/transfer-events","title":"Transfer events","description":"Display the events that occur during a transfer by sending a value to a random account","sidebar":"reference"},"api/examples/promise/typegen":{"id":"api/examples/promise/typegen","title":"TS type generation","description":"This is a sample TypeScript project with full source & config on GithHub, that uses @polkadot/typegen to generate type definitions that can be used to decorate the @polkadot/api. It uses both types defined for the specific chain as well as the chain metadata to generate TypeScript interfaces. This means that interfaces such as api.query., api.tx. and api.consts.* will be decorated based on chain-specific information, instead of an un-augmented catch-all definition.","sidebar":"reference"},"api/examples/promise/unsubscribe":{"id":"api/examples/promise/unsubscribe","title":"Unsubscribe from listening to updates","description":"This example shows how to subscribe to and later unsubscribe from listening to block updates.","sidebar":"reference"},"api/examples/promise/upgrade-chain":{"id":"api/examples/promise/upgrade-chain","title":"Chain upgrade","description":"Performs a chain upgrade using the sudo module. This may brick your chain, so use it as an educational sample. (use substrate purge-chain --dev to remove DB and recover).","sidebar":"reference"},"api/examples/rxjs/listen_to_balance_change/README":{"id":"api/examples/rxjs/listen_to_balance_change/README","title":"Listen to balance changes","description":"This example shows how to instantiate a Polkadot API object and use it to connect to a node and retrieve balance updates."},"api/examples/rxjs/listen_to_blocks/README":{"id":"api/examples/rxjs/listen_to_blocks/README","title":"Listen to new blocks","description":"This example shows how to subscribe to new blocks."},"api/examples/rxjs/make_transfer/README":{"id":"api/examples/rxjs/make_transfer/README","title":"Make a simple transfer","description":"This sample shows how to create a transaction to make a transfer from one an account to another."},"api/examples/rxjs/read_storage/README":{"id":"api/examples/rxjs/read_storage/README","title":"Read storage","description":"Many important variables are available through the storage API. This example shows how to call a few of those APIs."},"api/examples/rxjs/README":{"id":"api/examples/rxjs/README","title":"ApiRx Examples","description":"Here you will find a list of examples that takes you through the basics of connecting to a local node, retrieving data from the Node and chain and execute transactions on the chain. It uses the [[ApiRx]] interface."},"api/examples/rxjs/simple_connect/README":{"id":"api/examples/rxjs/simple_connect/README","title":"Simple Connect","description":"The following example shows how to instantiate a Polkadot API object and use it to connect to a node using ApiRx."},"api/examples/rxjs/system_events/README":{"id":"api/examples/rxjs/system_events/README","title":"Traverse events","description":"Query the system events and extract information from them. This example runs until exited via Ctrl-C"},"api/examples/rxjs/transfer_events/README":{"id":"api/examples/rxjs/transfer_events/README","title":"Transfer events","description":"Display the events that occur during a transfer by sending a value to a random account"},"api/examples/rxjs/unsubscribe/README":{"id":"api/examples/rxjs/unsubscribe/README","title":"Unsubscribe from listening to updates","description":"This example shows how to subscribe to and later unsubscribe from listening to block updates."},"api/examples/rxjs/upgrade_chain/README":{"id":"api/examples/rxjs/upgrade_chain/README","title":"Chain upgrade","description":"Performs a chain upgrade using the sudo module. This may brick your chain, so us it as an educational sample. (use substrate --dev purge-chain to remove DB and recover)."},"api/FAQ":{"id":"api/FAQ","title":"FAQ","description":"The list will be updated/expanded as questions come up, dealing with some common issues that API users find.","sidebar":"reference"},"api/intro":{"id":"api/intro","title":"Overview","description":"The API provides application developers the ability to query a node and interact with the Polkadot or Substrate chains using Javascript. Here you will find documentation and examples to get you started.","sidebar":"reference"},"api/start/api.consts":{"id":"api/start/api.consts","title":"Runtime constants","description":"Constant queries will introduce you to the concepts behind the types and the interaction of the API with those types. The same concepts are implemented in the remainder of the API - the runtime constants is just the simplest starting point.","sidebar":"reference"},"api/start/api.query":{"id":"api/start/api.query","title":"State queries","description":"In previous sections, we initialized the API and retrieved runtime constants. This section will walk through the concepts behind making queries to the chain to retrieve current state. The api.query.. interfaces, as already described earlier, is populated from the metadata. The API uses the metadata information provided to construct queries based on the location and parameters provided to generate state keys, and then queries these via RPC.","sidebar":"reference"},"api/start/api.query.multi":{"id":"api/start/api.query.multi","title":"Multi queries","description":"In a number of applications, it is useful to monitor a number of like-queries at the same time. For instance, we may want to track the balances for a list of accounts we have. The api.query interfaces allows this via the .multi subscription call.","sidebar":"reference"},"api/start/api.query.other":{"id":"api/start/api.query.other","title":"Query extras","description":"In previous sections we took a walk through queries, showing how to use one-shot queries, how to subscribe to results and how to combine multiple queries into one. This section will aim to extend that knowledge showing some other features and utilities that are available on the api.query interfaces.","sidebar":"reference"},"api/start/api.query.subs":{"id":"api/start/api.query.subs","title":"Query subscriptions","description":"Previously we explained the concepts between api.query. In this section we will expand on that knowledge to introduce subscriptions (akin to what we found in api.rpc) to stream results from the state, as it changes between blocks.","sidebar":"reference"},"api/start/api.rpc":{"id":"api/start/api.rpc","title":"RPC queries","description":"The RPC calls provide the backbone for the transmission of data to and from the node. This means that all API endpoints such as api.query, api.tx or api.derive just wrap RPC calls, providing information in the encoded format as expected by the node.","sidebar":"reference"},"api/start/api.tx":{"id":"api/start/api.tx","title":"Transactions","description":"Transaction endpoints are exposed, as determined by the metadata, on the api.tx endpoint. These allow you to submit transactions for inclusion in blocks, be it transfers, setting information or anything else your chain supports.","sidebar":"reference"},"api/start/api.tx.subs":{"id":"api/start/api.tx.subs","title":"Transaction subscriptions","description":"Previously we sent simple transactions using the api.tx endpoints, in this section we will extend that to monitor the actual transactions for inclusion and also extend the monitoring for transaction events.","sidebar":"reference"},"api/start/api.tx.wrap":{"id":"api/start/api.tx.wrap","title":"Complex transactions","description":"Up till now we have focussed on the base operation of transactions. There are however some more complex operations that deserve some more information, for instance when doing either democracy proposals or executing sudo calls, in both these cases the transaction wraps a call or proposal to be evaluated.","sidebar":"reference"},"api/start/basics":{"id":"api/start/basics","title":"Basics & Metadata","description":"One of the most important things to understand about the @polkadot/api is that most interfaces are actually generated automatically when it connects to a running node. This is quite a departure from other APIs in projects where the interfaces are static. While sounding quite scary, it actually is a powerful concept that exists in both Polkadot and Substrate chains, and allows the API to be used in environments where the chain is customized.","sidebar":"reference"},"api/start/create":{"id":"api/start/create","title":"Create an instance","description":"We have the API installed, we have an understanding of what will actually be exposed and how the API knows what to expose. So down the rabbit hole we go - let\'s create an actual API instance, and then take it from there -","sidebar":"reference"},"api/start/install":{"id":"api/start/install","title":"Installation","description":"Yes, it really is as simple as installing from npm, so we are not going to waste too much time with the bare basics, just install the API via","sidebar":"reference"},"api/start/intro":{"id":"api/start/intro","title":"Overview","description":"These sections should provide you with all the information needed to install the @polkadot/api package, understand the structure of the interfaces and allow you to start using it. For existing users this really should be titled \\"Things I wish I knew before I started using the api\\" - it really aims to close the gap to allow anybody to get to grips with using the packages.","sidebar":"reference"},"api/start/keyring":{"id":"api/start/keyring","title":"Keyring","description":"This section will give a quick introduction into the Keyring, including the addition of accounts, retrieving pairs and the signing of any data. Unlike the rest of the API, only the core concepts will be covered with the most-used-functions. However, what is covered is enough for 99.9 of the use-cases ... or rather, that is the aim.","sidebar":"reference"},"api/start/rpc.custom":{"id":"api/start/rpc.custom","title":"rpc.custom","description":"title: Custom RPC","sidebar":"reference"},"api/start/types.basics":{"id":"api/start/types.basics","title":"Type basics","description":"We\'ve touched upon types in most previous sections, i.e. that these are driven by metadata and that they are created and converted to/from automatically by the API. Since they appear in all results, we will divert a bit from the regularly scheduled program in explaining the API interfaces to giving some info on the base types.","sidebar":"reference"},"api/start/types.create":{"id":"api/start/types.create","title":"Type creation","description":"Circling back to metadata. There are two important things to remember when using the API to make queries or send transactions.","sidebar":"reference"},"api/start/types.extend":{"id":"api/start/types.extend","title":"Extending types","description":"Circling back to metadata, by default the metadata information (at this point in time), only returns the type names as they apply to any section, be it a call, event or query. As an example, this means that transfers are defined as balances.transfer(AccountId, Balance) with no details as to the mapping of the Balance type to a u128. (The underlying Polkadot/Substrate default)","sidebar":"reference"},"api/start/typescript":{"id":"api/start/typescript","title":"TypeScript interfaces","description":"The API is written in TypeScript, and as such definitions for all actual exposed interfaces are available. In general terms, care has been taken to expose types via a @polkadot//types interface, for instance the ApiOptions type which is passed through on the .create interface is available under @polkadot/api/types.","sidebar":"reference"},"api/start/typescript.user":{"id":"api/start/typescript.user","title":"TypeScript user generated","description":"In the previous section we looked at the TypeScript definitions that are available and are generated from both the chain and definitions. Here we will expand upon the use of the infrastructure created to define types as part of the @polkadot/types library and see how to use them to generate your own definitions and chain types.","sidebar":"reference"},"extension/cookbook":{"id":"extension/cookbook","title":"Cookbook","description":"A set of code snippets ready to be used.","sidebar":"reference"},"extension/FAQ":{"id":"extension/FAQ","title":"FAQ","description":"The list will be updated/expanded as questions come up.","sidebar":"reference"},"extension/intro":{"id":"extension/intro","title":"Overview","description":"The @polkadot/extension-dapp package provides an extractor that manipulates the window.injectedWeb3 to retrieve all the providers added to the page. It has a number of utilities","sidebar":"reference"},"extension/usage":{"id":"extension/usage","title":"Usage","description":"To install the component, do yarn add @polkadot/extension-dapp","sidebar":"reference"},"intro":{"id":"intro","title":"Overview","description":"Got here looking for the Apps UI (Wallet)? Just follow the preceding link. Looking for developer documentation? Then you are at the right place.","sidebar":"reference"},"keyring/examples/create-account":{"id":"keyring/examples/create-account","title":"Create Account","description":"The following example shows how to create and account with keyring."},"keyring/examples/intro":{"id":"keyring/examples/intro","title":"Overview","description":"Here you will find a list of examples that takes you through the basics of using the keyring."},"keyring/examples/load-accounts":{"id":"keyring/examples/load-accounts","title":"Load Accounts","description":"The following example shows how to load all accounts from the keyring as pairs and convert them into JSON format."},"keyring/examples/sign-verify":{"id":"keyring/examples/sign-verify","title":"Sign & Verify Message","description":"The following example shows how to sign and verify a message with NaCl (pronounced \\"salt\\"), which is a Networking and Cryptography library used in util-crypto."},"keyring/FAQ":{"id":"keyring/FAQ","title":"FAQ","description":"The list will be updated/expanded as questions come up, dealing with some common issues that Keyring users find.","sidebar":"reference"},"keyring/intro":{"id":"keyring/intro","title":"Overview","description":"The Keyring allows you to manage a set of keys in a consistent environment, allows you to perform operations on these keys (such as sign/verify) and never exposes the secretKey to the outside world.","sidebar":"reference"},"keyring/start/basics":{"id":"keyring/start/basics","title":"Basics","description":"The Keyring is responsible for managing a set of keypairs. As such the only function it has it to allow you to add and remove pairs to an interface. Each pair in itself is a specific account and on each of these accounts you can perform functions such as signing, verification and encryption/decryption of the account.","sidebar":"reference"},"keyring/start/create":{"id":"keyring/start/create","title":"Create","description":"To create your first keyring, it is as simple as importing it and constructing it.","sidebar":"reference"},"keyring/start/install":{"id":"keyring/start/install","title":"Installation","description":"Yes, it really is as simple as installing from npm, so we are not going to waste too much time with the bare basics, just install the Keyring via","sidebar":"reference"},"keyring/start/intro":{"id":"keyring/start/intro","title":"Overview","description":"These sections should provide you with all the information needed to install the @polkadot/keyring package, understand the structure of the interfaces and allow you to start using it. For existing users this really should be titled \\"Things I wish I knew before I started using the keyring\\" - it really aims to close the gap to allow anybody to get to grips with using the package.","sidebar":"reference"},"keyring/start/sign-verify":{"id":"keyring/start/sign-verify","title":"Sign & Verify","description":"In the previous sections we explored creating and adding a pair to the Keyring. However, let\'s actually use the pairs in something that is not just extracting local information.","sidebar":"reference"},"keyring/start/ss58":{"id":"keyring/start/ss58","title":"ss58 Formats","description":"In your previous examples, we explicitly passed the default ss58Format to the keyring. To understand the impact, we will use a real example of formatting using a known mnemonic.","sidebar":"reference"},"keyring/start/suri":{"id":"keyring/start/suri","title":"Substrate Uri","description":"Substrate has a standard derivation format that applies on any seeds and mnemonics. This means that for a given secret, you can apply hard derivations, soft derivations to generate a new pair. In all the examples we have used either addFromUri or createFromUri and have supplied all with an empty derivation path.","sidebar":"reference"},"substrate/constants":{"id":"substrate/constants","title":"Constants","description":"The following sections contain the module constants, also known as parameter types. These can only be changed as part of a runtime upgrade. On the api, these are exposed via api.consts...","sidebar":"reference"},"substrate/errors":{"id":"substrate/errors","title":"Errors","description":"This page lists the errors that can be encountered in the different modules.","sidebar":"reference"},"substrate/events":{"id":"substrate/events","title":"Events","description":"Events are emitted for certain operations on the runtime. The following sections describe the events that are part of the default Substrate runtime.","sidebar":"reference"},"substrate/extrinsics":{"id":"substrate/extrinsics","title":"Extrinsics","description":"The following sections contain Extrinsics methods are part of the default Substrate runtime. On the api, these are exposed via api.tx...","sidebar":"reference"},"substrate/intro":{"id":"substrate/intro","title":"Overview","description":"As part of a running node, some information is exposed as part of the metadata. These sections provide a static list of available interfaces as generated from a running Substrate node.","sidebar":"reference"},"substrate/rpc":{"id":"substrate/rpc","title":"JSON-RPC","description":"The following sections contain RPC methods that are Remote Calls available by default and allow you to interact with the actual node, query, and submit.","sidebar":"reference"},"substrate/storage":{"id":"substrate/storage","title":"Storage","description":"The following sections contain Storage methods are part of the default Substrate runtime. On the api, these are exposed via api.query...","sidebar":"reference"},"ui-identicon/intro":{"id":"ui-identicon/intro","title":"Overview","description":"The identity icon components allows you to display an address (or publicKey) as an unique icon, generated based on the contents and/or hash of the provided value. Additionally it allows for a variety of themes, either based on a Polkadot theme, Substrate theme or as a colored \\"Beachball\\". Additionally a custom renderer is also provided for, i.e. for cases where an app-specific icon is required.","sidebar":"reference"},"ui-identicon/react":{"id":"ui-identicon/react","title":"React","description":"A generic identity icon that can render icons based on the theme, be it Substrate or Polkadot","sidebar":"reference"},"ui-identicon/react-native":{"id":"ui-identicon/react-native","title":"React Native","description":"A generic identity icon that can render icons based on an address.","sidebar":"reference"},"ui-identicon/vue":{"id":"ui-identicon/vue","title":"Vue","description":"A generic identity icon that can render icons based on an address.","sidebar":"reference"},"ui-keyring/intro":{"id":"ui-keyring/intro","title":"Overview","description":"The @polkadot/ui-keyring package provides a wrapper around the @polkadot/keyring package, specifically for use in browser environments. The ui-keyring only extends the keyring, but does not replace it. All underlying account management functions are provided by the base keyring, the browser-specific extensions allows for transparent management of account state in storage.","sidebar":"reference"},"ui-keyring/start/accounts":{"id":"ui-keyring/start/accounts","title":"Accounts","description":"With our keyring setup completed in the previous section, and all available accounts loaded, we are ready to proceed. However we have not actually loaded any accounts yet, since well, we have not created or stored any previously. So let\'s change that.","sidebar":"reference"},"ui-keyring/start/addresses":{"id":"ui-keyring/start/addresses","title":"Addresses","description":"As mentioned in previous sections, the keyring not only has the ability to manage accounts (i.e. keypairs), but also allows you to add addresses/contacts as well as contracts to the keyring. This is very useful in the case where you are developing a wallet and want to save external addresses to interact with.","sidebar":"reference"},"ui-keyring/start/init":{"id":"ui-keyring/start/init","title":"Initialization","description":"To understand the initialization process, some background on the underlying libraries are required. For the Schnorrkel sr25519 a WASM library is used. This means that before sr25519 can be used, the WASM libraries needs to be loaded and initialized. This is not an issue when the keyring only uses ed25519.","sidebar":"reference"},"ui-keyring/start/install":{"id":"ui-keyring/start/install","title":"Installation","description":"If you already use the @polkadot/api in your project (which is true in most cases), you don\'t need anything more than yarn add @polkadot/ui-keyring @polkadot/ui-settings. In this case the ui-settings is a peer dependency, so should be installed alongside.","sidebar":"reference"},"ui-keyring/start/intro":{"id":"ui-keyring/start/intro","title":"Overview","description":"These sections should provide you with all the information needed to install the UI Keyring, understand the structure of the interfaces and allow you to start using it.","sidebar":"reference"},"ui-keyring/start/loading":{"id":"ui-keyring/start/loading","title":"Loading saved pairs","description":"Adding accounts is good. Having access to these accounts when added via const { pair } = keyring.addUr(...) is better, but being able to access these to iterate over at a later point (even after reload), is magic. Here we will try to add some magic to your experience, allowing you to retrieve accounts as well as subscribe to changes as they happen.","sidebar":"reference"},"usage/FAQ":{"id":"usage/FAQ","title":"FAQ","description":"The list will be updated/expanded as questions come up, dealing with some common build questions that library users find.","sidebar":"reference"},"util-crypto/examples/create-mnemonic":{"id":"util-crypto/examples/create-mnemonic","title":"Create Mnemonic","description":"The following example shows how to create and generate mnemonics using BIP39.","sidebar":"reference"},"util-crypto/examples/create-multisig":{"id":"util-crypto/examples/create-multisig","title":"Generate a Multisig Account","description":"Substrate provides a multisig dispatch function in its","sidebar":"reference"},"util-crypto/examples/encrypt-decrypt":{"id":"util-crypto/examples/encrypt-decrypt","title":"Encrypt & Decrypt Messages","description":"The following example shows how to encrypt and decrypt a message with NaCl (pronouced \\"salt\\"), which is a Networking and Cryptography library used in util-crypto.","sidebar":"reference"},"util-crypto/examples/hash-data":{"id":"util-crypto/examples/hash-data","title":"Hash Data","description":"There are many different hashing algorithms exposed in the util-crypto package.","sidebar":"reference"},"util-crypto/examples/intro":{"id":"util-crypto/examples/intro","title":"Overview","description":"Here you will find a list of examples that takes you through the basics of encrypting and decrypting messages using NaCl, signing a message with a seed and verifying it using NaCl, and generating and validating mnemonics for account seeds.","sidebar":"reference"},"util-crypto/examples/validate-address":{"id":"util-crypto/examples/validate-address","title":"Validate Address","description":"- This function will return true if the address is a legitamate Polkadot address and false if it is not","sidebar":"reference"},"util-crypto/examples/verify-signature":{"id":"util-crypto/examples/verify-signature","title":"Verify Signature","description":"This function will return true if a message passed as parameter has been signed by the passed address","sidebar":"reference"},"util-crypto/FAQ":{"id":"util-crypto/FAQ","title":"FAQ","description":"The list will be updated/expanded as questions come up, dealing with some common issues that util-crypto users find.","sidebar":"reference"},"util-crypto/intro":{"id":"util-crypto/intro","title":"Overview","description":"For oft-repeated questions, the FAQ may have what you are looking for.","sidebar":"reference"}}}')}}]);